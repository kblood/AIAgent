using System;
using System.Collections.Generic;

namespace AIAgentTest.Services
{
    /// <summary>
    /// Simple dependency injection container
    /// </summary>
    public static class ServiceProvider
    {
        private static readonly Dictionary<Type, Func<object>> _services = new Dictionary<Type, Func<object>>();
        private static readonly Dictionary<Type, object> _singletons = new Dictionary<Type, object>();

        /// <summary>
        /// Registers a service with the container
        /// </summary>
        /// <typeparam name="T">Service type</typeparam>
        /// <param name="factory">Factory function to create the service</param>
        /// <param name="singleton">Whether to create a singleton instance</param>
        public static void Register<T>(Func<T> factory, bool singleton = true) where T : class
        {
            _services[typeof(T)] = () => factory();
            
            if (singleton)
            {
                // Pre-create singleton instance
                _singletons[typeof(T)] = factory();
            }
        }
        
        /// <summary>
        /// Registers a service implementation with the container
        /// </summary>
        /// <typeparam name="TInterface">Interface type</typeparam>
        /// <typeparam name="TImplementation">Implementation type</typeparam>
        /// <param name="singleton">Whether to create a singleton instance</param>
        public static void Register<TInterface, TImplementation>(bool singleton = true) 
            where TImplementation : class, TInterface, new()
        {
            if (singleton)
            {
                var instance = new TImplementation();
                _singletons[typeof(TInterface)] = instance;
                _services[typeof(TInterface)] = () => instance;
            }
            else
            {
                _services[typeof(TInterface)] = () => new TImplementation();
            }
        }

        /// <summary>
        /// Resolves a service from the container
        /// </summary>
        /// <typeparam name="T">Service type</typeparam>
        /// <returns>Service instance</returns>
        public static T Resolve<T>() where T : class
        {
            var type = typeof(T);
            
            if (_singletons.TryGetValue(type, out var singleton))
            {
                return (T)singleton;
            }
            
            if (_services.TryGetValue(type, out var factory))
            {
                return (T)factory();
            }
            
            throw new InvalidOperationException($"Service {type.Name} is not registered");
        }
        
        /// <summary>
        /// Checks if a service is registered
        /// </summary>
        /// <typeparam name="T">Service type</typeparam>
        /// <returns>True if the service is registered</returns>
        public static bool IsRegistered<T>() where T : class
        {
            var type = typeof(T);
            return _services.ContainsKey(type) || _singletons.ContainsKey(type);
        }
        
        /// <summary>
        /// Clears all registered services
        /// </summary>
        public static void Clear()
        {
            _services.Clear();
            _singletons.Clear();
        }
    }
}