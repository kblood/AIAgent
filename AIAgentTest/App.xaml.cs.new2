using System.Windows;
using AIAgentTest.API_Clients;
using AIAgentTest.Services;
using AIAgentTest.Services.Interfaces;
using AIAgentTest.Services.MCP;
using AIAgentTest.ViewModels;

namespace AIAgentTest
{
    public partial class App : Application
    {
        protected override void OnStartup(StartupEventArgs e)
        {
            base.OnStartup(e);

            // Initialize services for our new MVVM architecture
            try
            {
                // Register base services
                RegisterBaseServices();
                
                // Register MCP services
                MCPServiceRegistration.RegisterMCPServices();
                
                // Register view models
                RegisterViewModels();
            }
            catch (System.Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error initializing services: {ex.Message}");
                // Don't crash the app if our services have issues
            }
            
            // Create and show the main window
            var mainWindow = new Views.TestWindow();
            mainWindow.DataContext = ServiceProvider.Resolve<MainViewModel>();
            mainWindow.Show();
            Current.MainWindow = mainWindow;
            
#if DEBUG
            // Run MVVM architecture tests in debug mode
            Testing.MVVMTester.RunTests().ConfigureAwait(false);
#endif
        }
        
        /// <summary>
        /// Registers the base services with the service provider
        /// </summary>
        private void RegisterBaseServices()
        {
            // Register the LLM client factory
            ServiceProvider.Register<LLMClientFactory>(() => new LLMClientFactory());
            
            // Create and register the Ollama client
            var llmClientFactory = ServiceProvider.Resolve<LLMClientFactory>();
            var ollamaClient = llmClientFactory.CreateClient("ollama") as OllamaClient;
            ServiceProvider.Register<OllamaClient>(() => ollamaClient);
            
            // Register base LLM client
            ServiceProvider.Register<ILLMClient>(() => ollamaClient);
            
            // Register base services
            ServiceProvider.Register<ILLMClientService, LLMClientService>();
            ServiceProvider.Register<IMessageParsingService, MessageParsingService>();
            ServiceProvider.Register<IChatSessionService, ChatSessionService>();
            // Register context manager with a default model
            ServiceProvider.Register<IContextManager>(() => {
                var contextManager = new AbstractedContextManager(ollamaClient);
                contextManager.DefaultModel = "llama3"; // Set a default model
                contextManager.IsContextEnabled = true;
                return contextManager;
            });
            ServiceProvider.Register<ThemeService>();
        }
        
        /// <summary>
        /// Registers the view models with the service provider
        /// </summary>
        private void RegisterViewModels()
        {
            // Register view models
            ServiceProvider.Register<ModelSelectionViewModel>(() => {
                var llmClientService = ServiceProvider.Resolve<ILLMClientService>();
                return new ModelSelectionViewModel(llmClientService);
            });
            
            ServiceProvider.Register<ChatSessionViewModel>(() => {
                var llmClientService = ServiceProvider.Resolve<IMCPLLMClientService>();
                var chatSessionService = ServiceProvider.Resolve<IChatSessionService>();
                var contextManager = ServiceProvider.Resolve<IMCPContextManager>();
                var messageParsingService = ServiceProvider.Resolve<IMessageParsingService>();
                return new ChatSessionViewModel(
                    llmClientService,
                    chatSessionService,
                    contextManager,
                    messageParsingService);
            });
            
            ServiceProvider.Register<CodeViewModel>();
            
            ServiceProvider.Register<DebugViewModel>(() => {
                var contextManager = ServiceProvider.Resolve<IContextManager>();
                return new DebugViewModel(contextManager);
            });
            
            // Register main view model
            ServiceProvider.Register<MainViewModel>(() => {
                var themeService = ServiceProvider.Resolve<ThemeService>();
                var modelSelectionViewModel = ServiceProvider.Resolve<ModelSelectionViewModel>();
                var codeViewModel = ServiceProvider.Resolve<CodeViewModel>();
                var debugViewModel = ServiceProvider.Resolve<DebugViewModel>();
                var chatSessionViewModel = ServiceProvider.Resolve<ChatSessionViewModel>();
                
                // Set up model selection linking
                modelSelectionViewModel.PropertyChanged += (s, e) => {
                    if (e.PropertyName == nameof(ModelSelectionViewModel.SelectedModel)) {
                        chatSessionViewModel.SelectedModel = modelSelectionViewModel.SelectedModel;
                    }
                };
                
                return new MainViewModel(
                    themeService,
                    modelSelectionViewModel,
                    codeViewModel,
                    debugViewModel,
                    chatSessionViewModel);
            });
        }

        protected override void OnExit(ExitEventArgs e)
        {
            // Clean up services
            LLMClientFactory.ReleaseAllClients();
            ServiceProvider.Clear();
            
            base.OnExit(e);
        }
    }
}